#!/usr/bin/env python3
# -*- coding:utf8  -*-

#
# MIT License
#
# Copyright (c) 2018-2021 Jean-Marie BARAN (jeanmarie.baran@gmail.com)
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#

import contexts
import os
import sys

from aosptree import AOSPTree
from commandline import AOSPSpecCommandLineInterface
from configuration import Configuration
from sanity import SanityChecks


class AOSPSpec(object):
    """
    An :class:`AOSPSpec` is a set of AOSP build rules. It defines the rules to use on top of an :class:`AOSPTree`.
    """

    _BUILDSPEC_FILE_NAME = 'buildspec.mk'
    _BUILDSPEC_FILE_NAME_FORMAT = 'buildspec-{}-{}.mk'

    def __init__(self, product: str, variant: str) -> None:
        self._product = product
        self._variant = variant

    def __str__(self) -> str:
        return AOSPSpec.description(self._product, self._variant)

    @staticmethod
    def from_aosp_tree(aosp_tree: AOSPTree) -> 'AOSPSpec':
        """
        Reverse operation than :method:`setup`. Parse a buildspec file.

        :param aosp_tree: an instance of an AOSP tree.
        :return: a new instance of an :class:`AOSPSpec`.
        """
        with contexts.set_cwd(aosp_tree.path()):
            with open(AOSPSpec._BUILDSPEC_FILE_NAME) as buildspec_file:
                buildspec_content = buildspec_file.readlines()

            product = ''
            variant = ''
            for line in buildspec_content:
                if not line.strip().startswith('#'):
                    name, value = (item.strip() for item in line.strip().split(':='))
                    if name == 'TARGET_PRODUCT':
                        product = value
                    elif name == 'TARGET_BUILD_VARIANT':
                        variant = value

                    if product and variant:
                        return AOSPSpec(product, variant)

        raise ValueError('Invalid buildspec file')

    def setup(self, configuration: Configuration, aosp_tree: AOSPTree) -> None:
        """
        Generate the ``buildspec.mk`` file for building without sourcing the environment file nor calling ``lunch``, as
        advised there: https://android.googlesource.com/platform/build/+/master/Changes.md

        The file for the current product and variant is generated if it does not already exist. The symbolic link at the
        root of the path is set to point to the generated/existing file.

        :param configuration: the configuration.
        :param aosp_tree: an AOSP tree instance.
        """
        with contexts.set_cwd(aosp_tree.path()):
            if not os.path.isdir(configuration.buildspec_path()):
                os.makedirs(configuration.buildspec_path())

            buildspec_file_name = AOSPSpec._BUILDSPEC_FILE_NAME_FORMAT.format(self._product, self._variant)
            buildspec_file_path = os.path.join(configuration.buildspec_path(), buildspec_file_name)
            if not os.path.isfile(buildspec_file_path):

                buildspec_vars = {
                    'TARGET_PRODUCT': self._product,
                    'TARGET_BUILD_VARIANT': self._variant,
                    'BUILD_ENV_SEQUENCE_NUMBER': 13  # Refer to build/buildspec.mk.default
                }
                buildspec_content = '# Auto-generated by {}.\n'.format(os.path.basename(__file__))
                buildspec_content += '\n'.join(['{}:={}'.format(name, value) for name, value in buildspec_vars.items()])

                with open(buildspec_file_path, 'x') as buildspec_file:
                    buildspec_file.write(buildspec_content)

            if os.path.isfile(AOSPSpec._BUILDSPEC_FILE_NAME):
                os.unlink(AOSPSpec._BUILDSPEC_FILE_NAME)

            os.symlink(buildspec_file_path, AOSPSpec._BUILDSPEC_FILE_NAME)

    @staticmethod
    def description(product: str, variant: str) -> str:
        description = list()
        description.append('Product: {}'.format(product))
        description.append('Variant: {}'.format(variant))
        description.append('*' * max(map(len, description)))
        description.insert(0, description[-1])

        return '\n'.join(description)


def main() -> None:
    SanityChecks.run()

    configuration = Configuration()
    cli = AOSPSpecCommandLineInterface(configuration)
    aosp_tree = AOSPTree(cli.path())
    aosp_spec = AOSPSpec(cli.product(), cli.variant())
    print(aosp_tree)
    print(aosp_spec)
    if cli.press_enter():
        aosp_spec.setup(configuration, aosp_tree)
    else:
        sys.exit(os.EX_USAGE)  # Set an error code for canceling chained commands.


if __name__ == '__main__':
    main()
